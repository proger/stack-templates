{-# START_FILE package.yaml #-}
name: {{name}}
version: 0.1.0.0
license: ISC
github: {{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}
category: {{category}}{{^category}}AI{{/category}}
extra-source-files:
  - README.md

ghc-options:
  - -Wno-missing-signatures
  - -Wno-unused-matches
  - -Wno-unused-imports
  - -Wno-type-defaults
  - -Wincomplete-patterns

default-extensions:
  - OverloadedStrings
  - PackageImports
  - ScopedTypeVariables
  - TypeApplications
  - TypeFamilies
  - KindSignatures
  - DataKinds
  - DeriveFunctor
  - DeriveGeneric
  - GeneralizedNewtypeDeriving

dependencies:
  - base
  - containers
  - bytestring
  - text
  - unix
  - process
  - directory
  - pretty-show
  - vector
  - linear
  - simple-reflect
  - random
  - criterion

library:
  source-dirs: src

executables:
  {{name}}:
    main: {{name}}.hs
    source-dirs: app
    dependencies:
      - {{name}}
  benchmark:
    main: benchmark.hs
    source-dirs: app
    dependencies:
      - {{name}}

tests:
  test:
    main: Spec.hs
    source-dirs:
      - test
    dependencies:
      - {{name}}
      - hspec
      - QuickCheck

{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/{{pkgname}}{{^pkgname}}{{name}}{{/pkgname}}Spec.hs #-}
module {{pkgname}}{{^pkgname}}{{name}}{{/pkgname}}Spec where

import Test.Hspec
import Test.QuickCheck

import {{pkgname}}{{^pkgname}}{{name}}{{/pkgname}}

-- `main` is here so that this module can be run from GHCi on its own.  It is
-- not needed for automatic spec discovery.
main :: IO ()
main = hspec spec

spec :: Spec
spec = parallel $ do
  it "evals something" $ (1+1) `shouldBe` 2
  it "prints something" $ repl `shouldReturn` ()
  it "is a stub" $ do
    pending

  describe "read" $ do
    context "when used with ints" $ do
      it "is inverse to show" $ property $
        \x -> (read . show) x == (x :: Int)    

{-# START_FILE src/{{pkgname}}{{^pkgname}}{{name}}{{/pkgname}}.hs #-}
module {{pkgname}}{{^pkgname}}{{name}}{{/pkgname}} (
  module {{pkgname}}{{^pkgname}}{{name}}{{/pkgname}}
, module {{pkgname}}{{^pkgname}}{{name}}{{/pkgname}}.Internal
) where

import {{pkgname}}{{^pkgname}}{{name}}{{/pkgname}}.Internal

{-# START_FILE src/{{pkgname}}/Internal.hs #-}
module {{pkgname}}{{^pkgname}}{{name}}{{/pkgname}}.Internal where

repl :: IO ()
repl = putStrLn "hello"

{-# START_FILE app/{{name}}.hs #-}
module Main where

import {{pkgname}}{{^pkgname}}{{name}}{{/pkgname}}

main :: IO ()
main = repl

{-# START_FILE app/benchmark.hs #-}
module Main where

import Criterion.Main
import Data.List (sort)
import System.Random

numbers :: IO ([Int], [Int], [Int])
numbers = do
  g <- getStdGen
  let xs = take 50 (randoms g :: [Int])
  let sorted    = sort xs
      revsorted = reverse sorted
  return (xs, sorted, revsorted)

sorts :: Benchmark
sorts = env numbers $ \ ~(random,sorted,revsorted) ->
  bgroup "sort"
  [ bgroup "base"
    [ bench "sorted"    $ nf sort sorted
    , bench "random"    $ nf sort random
    , bench "revsorted" $ nf sort revsorted
    ]
  ]

main :: IO ()
main = defaultMain [ sorts ]

{-# START_FILE README.md #-}
# {{name}}

